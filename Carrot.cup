/**********************************************************************
 Java CUP specification for a parser for Carrot programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};

/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal		        REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode       fnDecl;
non terminal FormalDeclNode   formalDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       formalsList;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList;
non terminal LinkedList       expList;
non terminal TypeNode         type;
non terminal StmtNode         stmt;
non terminal AssignStmtNode   assignStmt;
non terminal PostIncStmtNode  postIncStmt;
non terminal PostDecStmtNode  postDecStmt;
non terminal ReadStmtNode     readStmt;
non terminal WriteStmtNode    writeStmt;
non terminal IfStmtNode       ifStmt;
non terminal IfElseStmtNode   ifElseStmt;
non terminal WhileStmtNode    whileStmt;
non terminal RepeatStmtNode   repeatStmt;
non terminal CallStmtNode     callStmt;
non terminal ReturnStmtNode   returnStmt;
non terminal ExpNode          exp;
non terminal IntLitNode       intlit;
non terminal StringLitNode    strlit;
non terminal TrueNode         true;
non terminal FalseNode        false;
non terminal IdNode           id;
non terminal DotAccessExpNode dotAccess;
non terminal AssignNode       assign;
non terminal CallExpNode      callExp;
non terminal UnaryExpNode     unaryExp;
non terminal BinaryExpNode    binaryExp;
non terminal UnaryMinusNode   unaryMinus;
non terminal NotNode          not;
non terminal PlusNode         plus;
non terminal MinusNode        minus;
non terminal TimesNode        times;
non terminal DivideNode       divide;
non terminal AndNode          and;
non terminal OrNode           or;
non terminal EqualsNode       equals;
non terminal NotEqualsNode    notEquals;
non terminal LessNode         less;
non terminal GreaterNode      greater;
non terminal LessEqNode       lesseq;
non terminal GreaterEqNode    greatereq;
 
 
/* precedence and associativity */
precedence right    ASSIGN;
precedence left     OR;
precedence left     AND;
precedence nonassoc EQUALS, NOTEQUALS, LESS, LESSEQ, GREATER, GREATEREQ;
precedence left     PLUS, MINUS;
precedence left     TIMES, DIVIDE;
precedence left     DOT;
precedence nonassoc NOT;

start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | fnDecl:f
                {: RESULT = f;
                :}
                | structDecl:s
                {: RESULT = s;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;

fnDecl          ::= type:t id:i LPAREN formalsList:f RPAREN LCURLY fnBody:b RCURLY
                {: FormalsListNode fl = new FormalsListNode(f);
                   RESULT = new FnDeclNode(t, i, fl, b);
                :}
                ;

formalDecl      ::= type:t id:i
                {: RESULT = new FormalDeclNode(t, i);
                :}
                | type:t id:i COMMA
                {: RESULT = new FormalDeclNode(t, i);
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY declList:dl RCURLY
                {: 
                   DeclListNode dln = new DeclListNode(dl);
                   RESULT = new StructDeclNode(i, dln);
                :}
                ;

formalsList     ::= formalsList:fl formalDecl:fd
                {: fl.addLast(fd);
                   RESULT = fl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<FormalDeclNode>();
                :}
                ;

fnBody          ::= declList:dl stmtList:sl
                {: DeclListNode dln = new DeclListNode(dl);
                   StmtListNode sln = new StmtListNode(sl);
                   RESULT = new FnBodyNode(dln, sln);
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {: sl.addLast(s);
                   RESULT = sl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}
                ;

expList         ::= expList:el exp:e
                {: el.addLast(e);
                   RESULT = el;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<ExpNode>();
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;



stmt            ::= assignStmt:as
                {: RESULT = as;
                :}
                | postIncStmt:p
                {: RESULT = p;
                :}
                | postDecStmt:p
                {: RESULT = p;
                :}
                | readStmt:r
                {: RESULT = r;
                :}
                | writeStmt:w
                {: RESULT = w;
                :}
                | ifStmt:i
                {: RESULT = i;
                :}
                | ifElseStmt:i
                {: RESULT = i;
                :}
                | whileStmt:w
                {: RESULT = w;
                :}
                | repeatStmt:r
                {: RESULT = r;
                :}
                | callStmt:c
                {: RESULT = c;
                :}
                | returnStmt:r
                {: RESULT = r;
                :}
                ;

assignStmt      ::= assign:a SEMICOLON
                {: RESULT = new AssignStmtNode(a);
                :}
                ;

postIncStmt      ::= exp:e PLUSPLUS SEMICOLON
                {: RESULT = new PostIncStmtNode(e);
                :}
                ;

postDecStmt      ::= exp:e MINUSMINUS SEMICOLON
                {: RESULT = new PostDecStmtNode(e);
                :}
                ;

readStmt      ::= CIN READ exp:e SEMICOLON
                {: RESULT = new ReadStmtNode(e);
                :}
                ;

writeStmt      ::= COUT WRITE exp:e SEMICOLON
                {: RESULT = new WriteStmtNode(e);
                :}
                ;

ifStmt          ::= IF LPAREN exp:e RPAREN LCURLY declList:dl stmtList:sl RCURLY
                {: DeclListNode dln = new DeclListNode(dl);
                   StmtListNode sln = new StmtListNode(sl);
                   RESULT = new IfStmtNode(e, dln, sln);
                :}
                ;

ifElseStmt      ::= IF LPAREN exp:e RPAREN LCURLY declList:dl1 stmtList:sl1 RCURLY
                    ELSE LCURLY declList:dl2 stmtList:sl2 RCURLY
                {: DeclListNode dln1 = new DeclListNode(dl1);
                   StmtListNode sln1 = new StmtListNode(sl1);
                   DeclListNode dln2 = new DeclListNode(dl2);
                   StmtListNode sln2 = new StmtListNode(sl2);
                   RESULT = new IfElseStmtNode(e, dln1, sln1, dln2, sln2);
                :}
                ;

whileStmt       ::= WHILE LPAREN exp:e RPAREN LCURLY declList:dl stmtList:sl RCURLY
                {: DeclListNode dln = new DeclListNode(dl);
                   StmtListNode sln = new StmtListNode(sl);
                   RESULT = new WhileStmtNode(e, dln, sln);
                :}
                ;

repeatStmt      ::= REPEAT LPAREN exp:e RPAREN LCURLY declList:dl stmtList:sl RCURLY
                {: DeclListNode dln = new DeclListNode(dl);
                   StmtListNode sln = new StmtListNode(sl);
                   RESULT = new RepeatStmtNode(e, dln, sln);
                :}
                ;

callStmt        ::= callExp:c SEMICOLON
                {: RESULT = new CallStmtNode(c);
                :}
                ;

returnStmt      ::= RETURN SEMICOLON
                {: RESULT = new ReturnStmtNode(null);
                :}
                | RETURN exp:e SEMICOLON
                {: RESULT = new ReturnStmtNode(e);
                :}
                ;

exp             ::= id:i
                {: RESULT = i;
                :}
                | intlit:i
                {: RESULT = i;
                :}
                | strlit:s
                {: RESULT = s;
                :}
                | true:t
                {: RESULT = t;
                :}
                | false:f
                {: RESULT = f;
                :}
                | dotAccess:d
                {: RESULT = d;
                :}
                | assign:a
                {: RESULT = a;
                :}
                | callExp:c
                {: RESULT = c;
                :}
                | unaryExp:u
                {: RESULT = u;
                :}
                | binaryExp:b
                {: RESULT = b;
                :}
                ;

intlit          ::= INTLITERAL:i
                {: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                :}
                ;

strlit          ::= STRINGLITERAL:s
                {: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                ;

true            ::= TRUE:t
                {: RESULT = new TrueNode(t.linenum, t.charnum);
                :}
                ;

false           ::= FALSE:f
                {: RESULT = new FalseNode(f.linenum, f.charnum);
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;

dotAccess       ::= exp:e DOT id:i
                {: RESULT = new DotAccessExpNode(e, i);
                :}
                ;

assign          ::= exp:e1 ASSIGN exp:e2
                {: RESULT = new AssignNode(e1, e2);
                :}
                ;				

callExp         ::= id:i LPAREN expList:e RPAREN
                {: ExpListNode eln = new ExpListNode(e);
                   RESULT = new CallExpNode(i, eln);
                :}
                ;

unaryExp        ::= unaryMinus:u
                {: RESULT = u;
                :}
                | not:n
                {: RESULT = n;
                :}
                ;

unaryMinus      ::= MINUS exp:e
                {: RESULT = new UnaryMinusNode(e);
                :}
                ;

not             ::= NOT exp:e
                {: RESULT = new NotNode(e);
                :}
                ;

binaryExp       ::= plus:p
                {: RESULT = p;
                :}
                | minus:m
                {: RESULT = m;
                :}
                | divide:d
                {: RESULT = d;
                :}
                | times:t
                {: RESULT = t;
                :}
                | and:a
                {: RESULT = a;
                :}
                | or:o
                {: RESULT = o;
                :}
                | equals:e
                {: RESULT = e;
                :}
                | notEquals:n
                {: RESULT = n;
                :}
                | less:l
                {: RESULT = l;
                :}
                | greater:g
                {: RESULT = g;
                :}
                | lesseq:l
                {: RESULT = l;
                :}
                | greatereq:g
                {: RESULT = g;
                :}
                ;

plus            ::= exp:e1 PLUS exp:e2
                {: RESULT = new PlusNode(e1, e2);
                :}
                ;

minus           ::= exp:e1 MINUS exp:e2
                {: RESULT = new MinusNode(e1, e2);
                :}
                ;

times           ::= exp:e1 TIMES exp:e2
                {: RESULT = new TimesNode(e1, e2);
                :}
                ;

divide          ::= exp:e1 DIVIDE exp:e2
                {: RESULT = new DivideNode(e1, e2);
                :}
                ;

and             ::= exp:e1 AND exp:e2
                {: RESULT = new AndNode(e1, e2);
                :}
                ;

or              ::= exp:e1 OR exp:e2
                {: RESULT = new OrNode(e1, e2);
                :}
                ;

equals          ::= exp:e1 EQUALS exp:e2
                {: RESULT = new EqualsNode(e1, e2);
                :}
                ;

notEquals       ::= exp:e1 NOTEQUALS exp:e2
                {: RESULT = new NotEqualsNode(e1, e2);
                :}
                ;

less            ::= exp:e1 LESS exp:e2
                {: RESULT = new LessNode(e1, e2);
                :}
                ;

greater         ::= exp:e1 GREATER exp:e2
                {: RESULT = new GreaterNode(e1, e2);
                :}
                ;

lesseq          ::= exp:e1 LESSEQ exp:e2
                {: RESULT = new LessEqNode(e1, e2);
                :}
                ;

greatereq       ::= exp:e1 GREATEREQ exp:e2
                {: RESULT = new GreaterEqNode(e1, e2);
                :}
                ;